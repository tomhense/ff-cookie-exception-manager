import json
import sqlite3
from _typeshed import Incomplete
from datetime import datetime
from enum import Enum
from ff_cookie_exception_manager import logger as logger
from pathlib import Path

class CustomEncoder(json.JSONEncoder):
    def default(self, o): ...

class CustomDecoder(json.JSONDecoder):
    def __init__(self, *args, **kwargs) -> None: ...
    def object_hook(self, d): ...

class FFProfile:
    name: Incomplete
    path: Incomplete
    isDefault: Incomplete
    isRelative: Incomplete
    def __init__(self, name: str, path: Path, isDefault: bool, isRelative: bool) -> None: ...
    def getPermissionDatabasePath(self) -> Path: ...
    def to_dict(self): ...
    @classmethod
    def from_dict(cls, d): ...

class CookieExceptionRule:
    class Permission(Enum):
        ALWAYS: int
        SESSION: int
    origin: Incomplete
    permission: Incomplete
    modificationTime: Incomplete
    modificationTimestamp: Incomplete
    def __init__(self, origin: str, permission: Permission, modificationTime: datetime) -> None: ...
    def verify(self): ...
    def to_dict(self): ...
    @classmethod
    def from_dict(cls, d): ...

def openDatabase(profile: FFProfile) -> sqlite3.Connection: ...
def getProfiles() -> list[FFProfile]: ...
def getDefaultProfile() -> FFProfile: ...
def importRules(conn: sqlite3.Connection, rules: list[CookieExceptionRule], updateExisting: bool = False) -> None: ...
def getExceptions(conn: sqlite3.Connection) -> list[CookieExceptionRule]: ...
def deleteAllExceptions(conn: sqlite3.Connection) -> None: ...
